#!/usr/bin/env bun
/**
 * Build script to embed templates and commands as string literals
 * This runs before compilation to create a TypeScript file with all resources
 */

import { readdirSync, readFileSync, writeFileSync } from 'node:fs';
import { join } from 'node:path';

const projectRoot = join(import.meta.dir, '..');
const templatesDir = join(projectRoot, 'templates');
const commandsDir = join(projectRoot, '.claude', 'commands');
const outputFile = join(projectRoot, 'src', 'lib', 'embedded-resources.ts');

// Read all template files
const templates: Record<string, string> = {};
const templateFiles = readdirSync(templatesDir).filter(f => f.endsWith('.md') || f === 'track.config.json');

for (const file of templateFiles) {
  // Skip learned_mistakes.md as it's no longer used
  if (file === 'learned_mistakes.md') continue;

  const content = readFileSync(join(templatesDir, file), 'utf-8');
  templates[file] = content;
}

// Read all command files
const commands: Record<string, string> = {};
const commandFiles = readdirSync(commandsDir).filter(f => f.endsWith('.md'));

for (const file of commandFiles) {
  // Skip setup-cc-track.md as it's created by init
  if (file === 'setup-cc-track.md') continue;

  const content = readFileSync(join(commandsDir, file), 'utf-8');
  commands[file] = content;
}

// Generate TypeScript file
const output = `/**
 * Auto-generated file containing embedded templates and commands
 * DO NOT EDIT - Generated by scripts/embed-resources.ts
 */

export const embeddedTemplates: Record<string, string> = ${JSON.stringify(templates, null, 2)};

export const embeddedCommands: Record<string, string> = ${JSON.stringify(commands, null, 2)};
`;

writeFileSync(outputFile, output);
console.log(`âœ… Generated ${outputFile}`);
console.log(`   - ${Object.keys(templates).length} templates embedded`);
console.log(`   - ${Object.keys(commands).length} commands embedded`);