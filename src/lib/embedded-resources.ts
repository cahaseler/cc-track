/**
 * Auto-generated file containing embedded templates and commands
 * DO NOT EDIT - Generated by scripts/embed-resources.ts
 */

export const embeddedTemplates: Record<string, string> = {
  "user_context.md": "# User Context\n\n**Purpose:** Capture insights about working effectively with the user, their preferences, communication style, and key context from past interactions.\n\n**Instructions:**\n- Populate from journal insights during initialization\n- Update when learning significant new preferences\n- Focus on actionable insights for better collaboration\n- Keep professional but honest about what works/doesn't\n\n---\n\n## Communication Preferences\n\n*(To be populated from journal review)*\n\n## Working Style\n\n*(To be populated from journal review)*\n\n## Technical Preferences\n\n*(To be populated from journal review)*\n\n## Important Context\n\n*(To be populated from journal review)*\n\n## What to Avoid\n\n*(To be populated from journal review)*\n\n---\n\n## Update Log\n\n*(Timestamps of significant updates)*",
  "progress_log.md": "# Progress Log\n\n**Purpose:** Chronological, granular log of tasks initiated, delegated, and completed. Tracks step-by-step execution of work.\n\n**Instructions:**\n- Log entries for task status changes (Started, Blocked, Completed)\n- Include timestamps for all entries\n- Do **NOT** modify existing entries - append chronologically\n- Format: `[YYYY-MM-DD HH:MM] - [Status]: [Task Summary]`\n\n---\n### Status Types\n- **Started:** Task initiated\n- **Completed:** Task finished successfully\n- **Blocked:** Task cannot proceed (include reason)\n- **Failed:** Task failed (include error)\n- **Reviewed:** Task output reviewed/validated\n- **Revised:** Task output modified based on feedback\n\n### Template Entry\n```\n[YYYY-MM-DD HH:MM] - [Status]: [Task description]\n  Details: [Optional additional context]\n  Files: [Files affected if relevant]\n```\n\n## Log Entries\n\n*(Task status updates will be appended here chronologically)*",
  "track.config.json": "{\n  \"hooks\": {\n    \"capture_plan\": {\n      \"enabled\": false\n    },\n    \"stop_review\": {\n      \"enabled\": false\n    },\n    \"edit_validation\": {\n      \"enabled\": false,\n      \"typecheck\": {\n        \"enabled\": false\n      },\n      \"lint\": {\n        \"enabled\": false\n      }\n    },\n    \"pre_compact\": {\n      \"enabled\": false\n    },\n    \"pre_tool_validation\": {\n      \"enabled\": false\n    }\n  },\n  \"features\": {\n    \"statusline\": {\n      \"enabled\": false\n    },\n    \"git_branching\": {\n      \"enabled\": false\n    },\n    \"private_journal\": {\n      \"enabled\": false\n    },\n    \"branch_protection\": {\n      \"enabled\": false,\n      \"protected_branches\": [\"main\", \"master\"],\n      \"allow_gitignored\": true\n    },\n    \"api_timer\": {\n      \"display\": \"hide\"\n    },\n    \"github_integration\": {\n      \"enabled\": false,\n      \"auto_create_issues\": false,\n      \"use_issue_branches\": false,\n      \"auto_create_prs\": false\n    },\n    \"code_review\": {\n      \"enabled\": false,\n      \"tool\": \"claude\"\n    }\n  },\n  \"logging\": {\n    \"enabled\": true,\n    \"level\": \"info\",\n    \"retentionDays\": 7\n  }\n}",
  "system_patterns.md": "# System Patterns\n\n**Purpose:** Records established technical patterns, architectural decisions, coding standards, and recurring workflows. Ensures consistency and maintainability.\n\n**Instructions:**\n- Document significant, recurring patterns and standards\n- Explain rationale behind chosen patterns\n- Update when new patterns adopted or existing modified\n- Append updates with: `[YYYY-MM-DD HH:MM] - [Description of Pattern/Change]`\n\n---\n\n## Architectural Patterns\n\n*(High-level structural patterns, e.g., Microservices, Monolith, Layered Architecture, Event-Driven)*\n\n## Design Patterns\n\n*(Common design patterns used in codebase, e.g., Singleton, Factory, Observer, Strategy)*\n\n## Coding Standards & Conventions\n\n*(Key coding style guides, naming conventions, linting rules)*\n\n### Naming Conventions\n- Functions: \n- Variables: \n- Classes: \n- Files: \n\n### Code Style\n- Indentation: \n- Line length: \n- Comments: \n\n### Git Conventions\n- Branch naming: \n- Commit messages: \n- PR process: \n\n## Testing Patterns\n\n*(Testing approach, coverage requirements, test structure)*\n\n- Test framework: \n- Coverage target: \n- Test organization: \n- Mocking strategy: \n\n## Workflow Patterns\n\n*(Standard processes for development, testing, deployment)*\n\n### Development Workflow\n1. \n2. \n3. \n\n### Review Process\n1. \n2. \n3. \n\n## Tool Preferences\n\n*(Specific tools and why they're preferred)*\n\n- **Database access:** (e.g., MCP vs CLI)\n- **File operations:** (e.g., Read vs cat)\n- **Search:** (e.g., Grep vs find)\n- **Package management:** (e.g., npm vs yarn)\n\n---\n\n## Update Log\n\n*(Timestamps and summaries of significant changes or additions to patterns)*",
  "active_task.md": "# Active Task\n\n**Purpose:** Current state of the active task, including immediate focus, recent activities, open questions, and blockers. Provides snapshot of \"what's happening now.\"\n\n**Instructions:**\n- Keep focused on *current* working context\n- Use timestamps: `[YYYY-MM-DD HH:MM] - [Summary]`\n- Hook will append updates to relevant sections\n\n---\n\n## Current Task\n\n*(Primary task or area of work currently being addressed)*\n\n### Task Details\n- **Name:** [Task name from plan]\n- **Status:** planning | implementing | testing | blocked | complete\n- **Branch:** [Git branch]\n- **Started:** [YYYY-MM-DD HH:MM]\n\n### Requirements\n- [ ] [Requirement from plan]\n- [ ] [Requirement from plan]\n\n### Success Criteria\n- [ ] Tests passing\n- [ ] Requirements met\n- [ ] Code reviewed\n\n## Recent Changes & Activities\n\n*(Significant actions, decisions, or changes made recently)*\n\n- [YYYY-MM-DD HH:MM] - [Activity]\n\n## Open Questions & Blockers\n\n*(Unresolved questions, blockers, or issues needing attention)*\n\n- [YYYY-MM-DD HH:MM] - [Issue/Question]\n\n## Next Steps\n\n*(Clear next actions to take)*\n\n1. [Next step]\n2. [Next step]\n\n---\n\n## Update Log\n\n*(Meta-changes to structure of this document)*",
  "no_active_task.md": "# No active task\r\n\r\nThere is currently no active task selected. The user may want to engage in high level project planning, documentation maintainance, project exploration, or other non-task oreinted work.\r\n\r\nThe following tasks are being tracked in this project:\r\n\r\n[NO PREVIOUS TASKS FOUND]\r\n\r\nTo begin a new task, the user should enable planning mode. If they seem to want to begin complex outcome driven work, you should suggest this but don't be insistent if they don't want to.",
  "decision_log.md": "# Decision Log\n\n**Purpose:** Immutable record of significant decisions made throughout the project lifecycle. Captures context, rationale, and implications of key choices.\n\n**Instructions:**\n- Log decisions with notable impact on project direction, architecture, or implementation\n- Include *why* the decision was made and alternatives considered\n- Do **NOT** modify existing entries - append chronologically\n- Format: `[YYYY-MM-DD HH:MM] - [Summary of Decision]` followed by details\n\n---\n\n## Log Entries\n\n*(Decisions will be appended here chronologically)*\n\n### Template Entry\n```\n[YYYY-MM-DD HH:MM] - [Decision Summary]\n- **Context:** [What prompted this decision]\n- **Decision:** [What was decided]\n- **Rationale:** [Why this choice was made]\n- **Alternatives Considered:** \n  - [Alternative 1]: [Why rejected]\n  - [Alternative 2]: [Why rejected]\n- **Implications:** [What this means for the project]\n- **Reversibility:** [Easy/Hard/Impossible to change later]\n```",
  "product_context.md": "# Product Context\n\n**Purpose:** High-level overview of the project's goals, target audience, core features, and vision. Stable reference for understanding the \"why\" behind the project.\n\n**Instructions:**\n- Maintain concise summary of project purpose and scope\n- Define primary users and their needs\n- List key features and functionalities\n- Update only when significant shifts in direction\n- Append updates with: `[YYYY-MM-DD HH:MM] - [Summary of Change]`\n\n---\n\n## Project Vision & Goals\n\n*(Overall vision for the project and specific, measurable goals)*\n\n## Target Audience\n\n*(Primary users of the product/system and their key characteristics or needs)*\n\n## Core Features & Functionality\n\n*(Essential features or capabilities of the project)*\n\n## Non-Goals / Out of Scope\n\n*(What the project is NOT intended to do or address)*\n\n## Technical Stack\n\n*(Key technologies, frameworks, and tools)*\n\n- **Language:** \n- **Framework:** \n- **Database:** \n- **Testing:** \n- **Deployment:** \n\n---\n\n## Update Log\n\n*(Timestamps and summaries of significant changes to this document)*",
  "CLAUDE.md": "# Project: [Your Project Name]\n\n## Active Task\n@.claude/no_active_task.md\n<!-- IMPORTANT: Never edit this file to mark a task complete. Use /complete-task command instead. -->\n\n## Product Vision\n@.claude/product_context.md\n\n## System Patterns\n@.claude/system_patterns.md\n\n## Decision Log\n@.claude/decision_log.md\n\n## Progress Log\n@.claude/progress_log.md\n\n## Code Index\n@.claude/code_index.md\n\n## User Context\n@.claude/user_context.md\n\n",
  "code_index.md": "# Code Index\n\n**Purpose:** Maps codebase structure, key files, functions, classes, and dependencies. Provides quick reference for navigation and understanding.\n\n**Instructions:**\n- Update when significant files added/removed\n- Track key functionality per file, especially utility functions that might be reused\n\n---\n\n## Directory Structure\n\n```\nproject-root/\n├── src/\n│   ├── \n│   └── \n├── tests/\n│   ├── \n│   └── \n├── docs/\n└── config/\n```\n\n## Key Files & Purpose\n\n| File | Purpose | Key Exports |\n|------|---------|-------------|\n| | | |\n\n## Core Functions & Classes\n\n\n### API Endpoints\n- **File:** \n- **Endpoints:** \n\n## Database Schema\n\n\n\n## Update Log\n\n*(Timestamps of significant structure changes)*"
};

export const embeddedCommands: Record<string, string> = {
  "prepare-completion.md": "---\nallowed-tools: Bash(cc-track prepare-completion), Edit, Read, Bash(bunx tsc:*), Bash(bunx biome:*), Bash(bun test:*)\ndescription: Prepare the current active task for completion (Phase 1 of task completion workflow)\n---\n\n# Prepare Task for Completion Command\n\n!`cc-track prepare-completion`\n\nNote: If you have the private journal MCP available, consider using mcp__private-journal__process_thoughts to record insights about technical challenges and learnings.",
  "cc-track-uninstall.md": "---\nshortname: cc-track-uninstall\ndescription: Safely uninstall cc-track from this project\nmodel: claude-sonnet-4-20250514\n---\n\n# Uninstall cc-track\n\nYou are going to safely uninstall cc-track from this project. Follow these steps carefully and ask for user confirmation at each major step.\n\n## Step 1: Confirm Uninstallation\n\nAsk the user: \"Are you sure you want to uninstall cc-track from this project? This will remove hooks, configurations, and optionally your task files and documentation.\"\n\nIf they say no, stop here.\n\n## Step 2: Remove Hooks from settings.json\n\nRead `.claude/settings.json` and remove all cc-track related hooks:\n- Remove any hooks with command containing \"cc-track hook\"\n- Remove the statusLine configuration if it contains \"cc-track statusline\"\n- Keep any non-cc-track hooks and configurations intact\n\nUse the Edit or MultiEdit tool to make these changes.\n\n## Step 3: Remove cc-track Configuration\n\nDelete the following configuration files:\n- `.claude/track.config.json`\n\n## Step 4: Remove cc-track Command Files\n\nDelete the following command files from `.claude/commands/`:\n- `setup-cc-track.md`\n- `complete-task.md`\n- `prepare-completion.md`\n- `add-to-backlog.md`\n- `config-track.md`\n- `cc-track-uninstall.md`\n\nNote: Only delete these specific cc-track command files, not any custom commands the user may have created.\n\n## Step 5: Optional - Remove Task Files\n\nAsk the user: \"Do you want to remove the task files in `.claude/tasks/`? These contain your project's task history.\"\n\nIf yes, delete the entire `.claude/tasks/` directory.\n\n## Step 6: Optional - Remove Documentation Files\n\nAsk the user: \"Do you want to remove the cc-track documentation files? This includes:\n- product_context.md\n- system_patterns.md\n- decision_log.md\n- progress_log.md\n- code_index.md\n- user_context.md\n- cc-track-workflow.md (documentation)\n- active_task.md (template)\n- no_active_task.md\n- backlog.md\n\nThese files contain valuable project documentation you may want to keep.\"\n\nIf yes, delete these files from `.claude/`.\n\n## Step 7: Update CLAUDE.md\n\nAsk the user: \"Do you want to remove the cc-track file references from CLAUDE.md? The documentation files will remain but won't be automatically imported.\"\n\nIf yes:\n1. Read `CLAUDE.md`\n2. Remove the following sections if they exist:\n   - `## Active Task` section with `@.claude/no_active_task.md` or task references\n   - `## Product Vision` section with `@.claude/product_context.md`\n   - `## System Patterns` section with `@.claude/system_patterns.md`\n   - `## Decision Log` section with `@.claude/decision_log.md`\n   - `## Code Index` section with `@.claude/code_index.md`\n   - `## User Context` section with `@.claude/user_context.md`\n   - `## Workflow Guide` section with `@.claude/cc-track-workflow.md`\n   - The comment about not committing work and using /complete-task\n\n3. Keep any other content the user has added to CLAUDE.md\n\n## Step 8: Remove npm Dependency (if present)\n\nCheck if cc-track is listed in package.json:\n1. Read `package.json`\n2. Check if \"cc-track\" appears in dependencies or devDependencies\n\nIf found, ask: \"cc-track is installed as a project dependency. Do you want to remove it from package.json?\"\n\nIf yes:\n- Remove the cc-track entry from dependencies/devDependencies\n- Suggest running `npm install` or `bun install` to update lock files\n\n## Step 9: Clean Up Logs Directory\n\nThe centralized logs are stored outside the project directory. Inform the user:\n\"cc-track logs are stored in `~/.local/share/cc-track/logs/` (or platform equivalent). You can manually delete this directory if you want to remove all cc-track logs from your system.\"\n\n## Step 10: Final Instructions\n\nTell the user:\n\"cc-track has been uninstalled from this project. Please restart Claude Code for all changes to take effect.\n\nIf you want to reinstall cc-track in the future, you can run:\n```bash\nnpx cc-track init\n```\n\nThen use the `/setup-cc-track` command in Claude Code.\"\n\n## Important Notes\n\n- Be careful to preserve any custom content the user has added\n- Don't delete files without explicit confirmation\n- Make backups if the user seems uncertain\n- Explain what each step does before doing it",
  "add-to-backlog.md": "---\nshortname: add-to-backlog\ndescription: Quickly add an item to the backlog without disrupting current work\nusage: /add-to-backlog \"Your idea or bug description\"\nallowed-tools: Bash(cc-track backlog:*)\n---\n\n!`cc-track backlog \"$ARGUMENTS\"`\n\nDo not change your current focus or priorities. Respond to the user only with `✅ Added [concise task description] has been added to backlog.` Continue with your work if there was a clear task you are working on, otherwise simply respond with the above and do nothing else.",
  "config-track.md": "---\nshortname: config-track\n---\n\n# Config cc-track Command\n\nUpdate the configuration file at `.claude/track.config.json` based on the user's request.\n\nIf called without parameters, show the current configuration and ask what they'd like to adjust.\n\n## Configuration Options\n\n**Hooks:**\n- `capture_plan` - Creates task files from planning mode\n- `pre_compact` - Updates task documentation before compaction\n- `post_compact` - Restores context after compaction\n- `stop_review` - Reviews changes and auto-commits with [wip]\n- `edit_validation` - Runs TypeScript/lint checks on edited files\n  - Configure the lint tool with:\n    ```json\n    \"lint\": {\n      \"enabled\": true,\n      \"tool\": \"biome\",  // or \"eslint\" or \"custom\"\n      \"command\": \"bunx biome check\",\n      \"autoFixCommand\": \"bunx biome check --write\"\n    }\n    ```\n\n**Features:**\n- `statusline` - Custom status line with costs and task info\n- `git_branching` - Create/merge feature branches for tasks\n- `api_timer` - Show API rate limit timer (display: hide/show/sonnet-only)\n- `github_integration` - GitHub issues and PR workflow\n  - `auto_create_issues` - Create issues for new tasks\n  - `use_issue_branches` - Use gh issue develop for branches\n  - `auto_create_prs` - Open PRs instead of merging\n  - `repository_url` - GitHub repo URL\n- `private_journal` - Use private journal MCP for enhanced context preservation",
  "complete-task.md": "---\nallowed-tools: Bash(cc-track complete-task), Bash(gh pr edit:*), Edit, Read\ndescription: Complete the current active task (Phase 2 of task completion workflow)\n---\n\n# Complete Task Command\n\n## Phase 2: Task Completion\n\n!`cc-track complete-task`",
  "task-from-issue.md": "---\nallowed-tools: Bash(cc-track task-from-issue:*), Read, Grep, Glob\ndescription: Create a cc-track task from a GitHub issue\n---\n\n# Create Task from GitHub Issue Command\n\n!`cc-track task-from-issue \"$@\"`"
};
